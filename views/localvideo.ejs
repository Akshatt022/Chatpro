<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>VideoConnect - Live Video</title>
    <link rel="stylesheet" href="css/style.css" />
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>ðŸ“¹</text></svg>">
  </head>
  <body class="bg-dark text-white h-screen overflow-hidden">
    <!-- Fullscreen remote video -->
    <div id="remoteVideo" class="relative w-full h-screen bg-black">
      <!-- Remote Video -->
      <video id="remote-Video" autoplay class="object-cover w-full h-full"></video>
      
      <!-- Video Overlay Gradient -->
      <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent pointer-events-none"></div>
      
      <!-- Connection Status -->
      <div class="absolute top-4 left-4 glass-morphism-dark px-4 py-2 rounded-full flex items-center space-x-2">
        <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
        <span class="text-sm text-white/80">Connected</span>
      </div>
      
      <!-- Call Timer -->
      <div class="absolute top-4 left-1/2 -translate-x-1/2 glass-morphism-dark px-6 py-2 rounded-full">
        <span id="call-timer" class="text-white font-mono">00:00</span>
      </div>
      <!-- Action buttons with icons -->
      <div class="absolute bottom-8 left-1/2 -translate-x-1/2 flex gap-4">
        <!-- Mute Button -->
        <button id="muteBtn" class="control-btn bg-gray-800/80 hover:bg-gray-700/80 text-white backdrop-blur-md">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
          </svg>
        </button>

        <!-- End Call Button -->
        <button id="endCallBtn" class="control-btn bg-red-600/80 hover:bg-red-700/80 text-white px-6 backdrop-blur-md">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M5 3a2 2 0 00-2 2v1c0 8.284 6.716 15 15 15h1a2 2 0 002-2v-3.28a1 1 0 00-.684-.948l-4.493-1.498a1 1 0 00-1.21.502l-1.13 2.257a11.042 11.042 0 01-5.516-5.517l2.257-1.128a1 1 0 00.502-1.21L9.228 3.683A1 1 0 008.279 3H5z"></path>
          </svg>
        </button>

        <!-- Video Toggle Button -->
        <button id="videoToggleBtn" class="control-btn bg-gray-800/80 hover:bg-gray-700/80 text-white backdrop-blur-md">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
          </svg>
        </button>
        
        <!-- Screen Share Button -->
        <button id="shareScreenBtn" class="control-btn bg-gray-800/80 hover:bg-gray-700/80 text-white backdrop-blur-md">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Movable local video -->
    <div id="localVideo" class="floating-video bottom-4 right-4 w-48 h-36 cursor-move">
      <video id="local-Video" autoplay muted class="w-full h-full object-cover rounded-2xl"></video>
    </div>
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js" integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+" crossorigin="anonymous"></script>
    <script>
        // Enable drag functionality for localVideo with boundary restrictions
        function makeMovable(videoElementId) {
          const videoElement = document.getElementById(videoElementId);
        
          let isDragging = false;
          let offsetX, offsetY;
        
          videoElement.addEventListener("mousedown", (e) => {
            isDragging = true;
            offsetX = e.clientX - videoElement.offsetLeft;
            offsetY = e.clientY - videoElement.offsetTop;
            videoElement.style.cursor = "move";
          });
        
          document.addEventListener("mousemove", (e) => {
            if (isDragging) {
              const container = document.getElementById("remoteVideo");
        
              const containerRect = container.getBoundingClientRect();
              const videoRect = videoElement.getBoundingClientRect();
        
              let newX = e.clientX - offsetX;
              let newY = e.clientY - offsetY;
        
              // Restrict movement within container
              if (newX < containerRect.left) newX = containerRect.left;
              if (newY < containerRect.top) newY = containerRect.top;
              if (newX + videoRect.width > containerRect.right)
                newX = containerRect.right - videoRect.width;
              if (newY + videoRect.height > containerRect.bottom)
                newY = containerRect.bottom - videoRect.height;
        
              videoElement.style.left = `${newX - containerRect.left}px`;
              videoElement.style.top = `${newY - containerRect.top}px`;
            }
          });
        
          document.addEventListener("mouseup", () => {
            isDragging = false;
            videoElement.style.cursor = "default";
          });
        }
        
        // Initialize draggable local video
        window.onload = () => {
          makeMovable("localVideo");
        };
  
        //Webrtc starts from here
        const socket = io();

let localStream;
let remoteStream;
let peerConnection;
let inCall = false;
let room;

// ICE server configuration
const servers = {
  iceServers: [
    { urls: "stun:stun.l.google.com:19302" },
    // Add your TURN server here if needed
    // {
    //   urls: "turn:YOUR_TURN_SERVER",
    //   username: "YOUR_USERNAME",
    //   credential: "YOUR_CREDENTIAL",
    // },
  ],
};

// Join room on connection
socket.emit("joinroom");
socket.on("joined", function (roomname) {
  room = roomname;
  console.log("Joined room:", room);
});

// WebRTC Initialization
async function startLocalStream() {
  try {
    localStream = await navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true,
    });
    document.getElementById("local-Video").srcObject = localStream;
    
    if (!inCall) {
      initiateOffer();
      inCall = true;
    }
  } catch (error) {
    console.error("Error accessing media devices:", error);
  }
}

// Initiating offer
const initiateOffer = async function() {
  await createPeerConnection();
  try {
    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);
    socket.emit("signalingMessage", {
      room: room,
      message: JSON.stringify({
        type: "offer",
        offer: offer
      })
    });
  } catch (err) {
    console.error("Failed to create offer:", err);
  }
}

// Create a peer connection
function createPeerConnection() {
  peerConnection = new RTCPeerConnection(servers);
  remoteStream = new MediaStream();
  document.getElementById("remote-Video").srcObject = remoteStream;

  localStream.getTracks().forEach((track) => {
    peerConnection.addTrack(track, localStream);
  }); 

  peerConnection.ontrack = (event) => {
    console.log("Received remote track:", event.track.kind);
    event.streams[0].getTracks().forEach((track) => {
      remoteStream.addTrack(track);
    });
  };

  peerConnection.onicecandidate = (event) => {
    if (event.candidate) {
      socket.emit("signalingMessage", {
        room: room,
        message: JSON.stringify({
          type: "candidate",
          candidate: event.candidate
        })
      });
    }
  };

  peerConnection.onconnectionstatechange = () => {
    console.log("Connection state:", peerConnection.connectionState);
  };
}



// Handle signaling messages
socket.on("signalingMessage", async (data) => {
  const message = JSON.parse(data.message);
  const { type, offer, answer, candidate } = message;
  
  if (type === "offer") {
    await handleOffer(offer);
  } else if (type === "answer") {
    await handleAnswer(answer);
  } else if (type === "candidate" && peerConnection) {
    try {
      await peerConnection.addIceCandidate(candidate);
    } catch (err) {
      console.error("Error adding ICE candidate:", err);
    }
  } else if (type === "hangup") {
    handleHangup();
  }
});

// Handle incoming offer
async function handleOffer(offer) {
  if (!localStream) {
    await startLocalStream();
  }
  
  await createPeerConnection();
  
  try {
    await peerConnection.setRemoteDescription(offer);
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    
    socket.emit("signalingMessage", {
      room: room,
      message: JSON.stringify({
        type: "answer",
        answer: answer
      })
    });
    
    inCall = true;
  } catch (err) {
    console.error("Error handling offer:", err);
  }
}

// Handle incoming answer
async function handleAnswer(answer) {
  try {
    await peerConnection.setRemoteDescription(answer);
  } catch (err) {
    console.error("Error handling answer:", err);
  }
}

// Handle hangup
function handleHangup() {
  if (peerConnection) {
    peerConnection.close();
    peerConnection = null;
  }
  
  if (localStream) {
    localStream.getTracks().forEach(track => track.stop());
    localStream = null;
  }
  
  document.getElementById("local-Video").srcObject = null;
  document.getElementById("remote-Video").srcObject = null;
  
  inCall = false;
  stopCallTimer();
}

// End call button functionality
document.getElementById("endCallBtn").addEventListener("click", () => {
  socket.emit("signalingMessage", {
    room: room,
    message: JSON.stringify({ type: "hangup" })
  });
  handleHangup();
});

// Mute button functionality
let isMuted = false;
document.getElementById("muteBtn").addEventListener("click", () => {
  if (localStream) {
    const audioTrack = localStream.getAudioTracks()[0];
    if (audioTrack) {
      audioTrack.enabled = !audioTrack.enabled;
      isMuted = !isMuted;
      document.getElementById("muteBtn").classList.toggle("bg-red-600");
      document.getElementById("muteBtn").classList.toggle("bg-gray-600");
    }
  }
});

// Share screen functionality
document.getElementById("shareScreenBtn").addEventListener("click", async () => {
  try {
    const screenStream = await navigator.mediaDevices.getDisplayMedia({
      video: true,
      audio: false
    });
    
    const videoTrack = screenStream.getVideoTracks()[0];
    const sender = peerConnection.getSenders().find(
      s => s.track && s.track.kind === "video"
    );
    
    if (sender) {
      sender.replaceTrack(videoTrack);
    }
    
    videoTrack.onended = () => {
      const cameraTrack = localStream.getVideoTracks()[0];
      if (sender && cameraTrack) {
        sender.replaceTrack(cameraTrack);
      }
    };
  } catch (err) {
    console.error("Error sharing screen:", err);
  }
});

// Call timer functionality
let callStartTime = null;
let timerInterval = null;

function startCallTimer() {
  callStartTime = Date.now();
  timerInterval = setInterval(updateCallTimer, 1000);
}

function updateCallTimer() {
  if (!callStartTime) return;
  const elapsed = Math.floor((Date.now() - callStartTime) / 1000);
  const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
  const seconds = (elapsed % 60).toString().padStart(2, '0');
  document.getElementById('call-timer').textContent = `${minutes}:${seconds}`;
}

function stopCallTimer() {
  if (timerInterval) {
    clearInterval(timerInterval);
    timerInterval = null;
  }
  callStartTime = null;
  document.getElementById('call-timer').textContent = '00:00';
}

// Update video toggle button
let videoEnabled = true;
document.getElementById('videoToggleBtn').addEventListener('click', () => {
  if (localStream) {
    const videoTrack = localStream.getVideoTracks()[0];
    if (videoTrack) {
      videoEnabled = !videoEnabled;
      videoTrack.enabled = videoEnabled;
      document.getElementById('videoToggleBtn').classList.toggle('bg-red-600/80');
      document.getElementById('videoToggleBtn').classList.toggle('bg-gray-800/80');
    }
  }
});

// Start the local stream when page loads
window.addEventListener("load", () => {
  startLocalStream();
  startCallTimer();
});

      </script>
  </body>
</html>
