<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>VideoConnect - Chat Room</title>
    <link rel="stylesheet" href="css/style.css" />
    <link rel="stylesheet" href="css/responsive.css" />
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>ðŸ“¹</text></svg>">
  </head>
  <body id="main" class="bg-dark h-screen overflow-hidden">
    <!-- Navigation Bar -->
    <nav class="glass-morphism-dark fixed top-0 left-0 right-0 z-50 nav-container">
      <div class="max-container flex justify-between items-center">
        <div class="flex items-center space-x-responsive">
          <div class="logo-container bg-gradient-to-br from-primary to-accent rounded-xl flex items-center justify-center">
            <svg class="logo-icon text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
          </div>
          <h1 class="nav-title font-display font-bold text-white">ChatPro</h1>
        </div>
        <div class="flex items-center space-x-responsive">
          <div id="connection-status" class="flex items-center space-x-1">
            <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            <span class="text-white/70 text-responsive-sm desktop-only">Connected</span>
          </div>
          <button id="endConnectionBtn" class="bg-red-600/20 text-red-400 border border-red-500/30 btn-responsive rounded-xl font-semibold hover:bg-red-500/30 transition-all hidden">
            <span class="desktop-only">End Connection</span>
            <span class="mobile-only">End</span>
          </button>
          <button id="videoCallBtn" class="btn-primary flex items-center justify-center space-x-1 btn-responsive">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
            <span class="desktop-only">Start Video</span>
          </button>
        </div>
      </div>
    </nav>

    <!-- Chat Section (Hidden during video call) -->
    <div id="chat-sec" class="h-full chat-section">
      <div class="max-container h-full">
        <div class="glass-morphism-dark chat-container h-full overflow-y-auto scrollbar-hide">
          <!-- Requesting the call  -->
          <div id="Request-call" class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 glass-morphism modal-container hidden animate-fade-in z-50 w-[90%]">
            <h2 class="modal-title font-display font-bold text-white text-center">Incoming Video Call</h2>
            <div class="flex justify-center mb-8">
              <div class="relative">
                <div class="w-24 h-24 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center animate-pulse">
                  <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                </div>
                <div class="absolute -bottom-2 -right-2 w-8 h-8 bg-green-500 rounded-full flex items-center justify-center animate-bounce">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                </div>
              </div>
            </div>
            <p class="text-white/70 text-center mb-8">Someone wants to video chat with you</p>
            <div class="flex space-x-4">
              <button id="Ignore-btn" class="flex-1 bg-red-500/20 text-red-400 border border-red-500/30 py-3 px-6 rounded-xl font-semibold hover:bg-red-500/30 transition-all">
                Decline
              </button>
              <button id="Accept-btn" class="flex-1 btn-primary">
                Accept
              </button>
            </div>
          </div>
          
          <!-- Waiting for call acceptance -->
          <div id="Waiting-call" class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 glass-morphism modal-container hidden animate-fade-in z-50 w-[90%]">
            <h2 id="waiting-title" class="modal-title font-display font-bold text-white text-center">Calling...</h2>
            <div class="flex justify-center mb-8">
              <div class="relative">
                <div class="w-24 h-24 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center">
                  <svg class="w-12 h-12 text-white animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                  </svg>
                </div>
                <div class="absolute -bottom-2 -right-2 w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center animate-spin">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                  </svg>
                </div>
              </div>
            </div>
            <p id="waiting-message" class="text-white/70 text-center mb-8">Waiting for partner to accept...</p>
            <div class="flex justify-center">
              <button id="Cancel-call-btn" class="bg-red-500/20 text-red-400 border border-red-500/30 py-3 px-6 rounded-xl font-semibold hover:bg-red-500/30 transition-all">
                Cancel Call
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Video Section -->
    <div id="video-sec" class="relative w-full h-screen bg-black overflow-hidden hidden">
      <!-- Remote Video -->
      <video id="remote-Video" autoplay class="object-cover w-full h-full"></video>
      
      <!-- Video Overlay Gradient -->
      <div class="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent pointer-events-none"></div>
      
      <!-- Local Video (Movable) -->
      <div id="localVideo" class="floating-video bottom-4 right-4 local-video-container cursor-move">
        <video id="local-Video" autoplay muted class="w-full h-full object-cover local-video"></video>
      </div>
      <!-- Controls -->
      <div class="absolute video-controls left-1/2 -translate-x-1/2 flex items-center justify-center">
        <button id="muteBtn" class="control-btn bg-gray-800/80 hover:bg-gray-700/80 text-white">
          <svg class="control-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
          </svg>
        </button>
        <button id="endCallBtn" class="control-btn bg-red-600/80 hover:bg-red-700/80 text-white px-5">
          <svg class="control-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M5 3a2 2 0 00-2 2v1c0 8.284 6.716 15 15 15h1a2 2 0 002-2v-3.28a1 1 0 00-.684-.948l-4.493-1.498a1 1 0 00-1.21.502l-1.13 2.257a11.042 11.042 0 01-5.516-5.517l2.257-1.128a1 1 0 00.502-1.21L9.228 3.683A1 1 0 008.279 3H5z"></path>
          </svg>
        </button>
        
        <button id="videoToggleBtn" class="control-btn bg-gray-800/80 hover:bg-gray-700/80 text-white">
          <svg class="control-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
          </svg>
        </button>
      </div>
      
      <!-- Call Timer -->
      <div class="absolute call-timer-container left-1/2 -translate-x-1/2 glass-morphism-dark rounded-full">
        <span id="call-timer" class="text-white font-mono call-timer-text">00:00</span>
      </div>
    </div>

    <!-- Typing Section -->
    <div id="Type-sec" class="fixed bottom-0 left-0 right-0 glass-morphism-dark input-section z-40">
      <div class="max-container">
        <form id="Type-form" class="flex items-center space-x-3">
          <input
            id="text-input"
            type="text"
            placeholder="Type a message..."
            class="flex-1 bg-white/10 backdrop-blur-sm text-white placeholder-white/50 message-input rounded-full
            border border-white/20 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/20 transition-all"
          />
          <button id="sendbtn" type="submit" class="btn-primary send-button">
            <svg class="send-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
          </button>
        </form>
      </div>
    </div>

    <!-- JAVASCRIPT -->
    <script
      src="https://cdn.socket.io/4.8.1/socket.io.min.js"
      integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+"
      crossorigin="anonymous"
    ></script>
    <script>
      const socket = io();
      let room;
      let isConnected = false;
      let callState = null; // null, 'initiating', 'incoming', 'active'
      const main = document.querySelector("#main");
      const chatbox = document.querySelector("#Type-sec");
      const textBox = document.querySelector("#text-input");
      const typeform = document.querySelector("#Type-form");
      const chatSec = document.querySelector("#chat-sec");
      const videoCallBtn = document.getElementById("videoCallBtn");
      const videoSection = document.getElementById("video-sec");
      const chatSection = document.getElementById("chat-sec");
      const typingSection = document.getElementById("Type-sec");
      const endCallBtn = document.getElementById("endCallBtn");
      const RequestCall = document.getElementById("Request-call");
      const IgnoreBtn = document.getElementById("Ignore-btn");
      const AcceptBtn = document.getElementById("Accept-btn");
      const endConnectionBtn = document.getElementById("endConnectionBtn");
      const WaitingCall = document.getElementById("Waiting-call");
      const CancelCallBtn = document.getElementById("Cancel-call-btn");

      // Join the room
      socket.emit("joinroom");
      socket.on("joined", function (roomname) {
        room = roomname;
        isConnected = true;
        updateConnectionUI(true);
      });

      // Handle disconnection
      socket.on("disconnect", () => {
        isConnected = false;
        updateConnectionUI(false);
      });

      socket.on("connect", () => {
        if (room) {
          isConnected = true;
          updateConnectionUI(true);
        }
      });

      // Update UI based on connection state
      function updateConnectionUI(connected) {
        const connectionStatus = document.getElementById("connection-status");
        const sendBtn = document.getElementById("sendbtn");
        const textInput = document.getElementById("text-input");
        const videoBtn = document.getElementById("videoCallBtn");
        const endConnBtn = document.getElementById("endConnectionBtn");
        const chatContainer = chatSec.querySelector('.glass-morphism-dark');

        if (connected) {
          // Enable controls
          sendBtn.disabled = false;
          textInput.disabled = false;
          videoBtn.disabled = false;
          sendBtn.classList.remove("opacity-50", "cursor-not-allowed");
          textInput.classList.remove("opacity-50", "cursor-not-allowed");
          videoBtn.classList.remove("opacity-50", "cursor-not-allowed");
          
          // Show end connection button
          endConnBtn.classList.remove("hidden");
          
          // Update connection status
          connectionStatus.innerHTML = `
            <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            <span class="text-white/70 text-sm">Connected</span>
          `;
          
          // Remove no connection message if exists
          const noConnMsg = document.getElementById("no-connection-msg");
          if (noConnMsg) {
            noConnMsg.remove();
          }
        } else {
          // Disable controls
          sendBtn.disabled = true;
          textInput.disabled = true;
          videoBtn.disabled = true;
          sendBtn.classList.add("opacity-50", "cursor-not-allowed");
          textInput.classList.add("opacity-50", "cursor-not-allowed");
          videoBtn.classList.add("opacity-50", "cursor-not-allowed");
          
          // Hide end connection button
          endConnBtn.classList.add("hidden");
          
          // Update connection status
          connectionStatus.innerHTML = `
            <div class="w-2 h-2 bg-red-400 rounded-full"></div>
            <span class="text-white/70 text-sm">Disconnected</span>
          `;
          
          // Clear all chat messages
          const messages = chatContainer.querySelectorAll('.mb-4');
          messages.forEach(msg => msg.remove());
          
          // Show no connection message in chat
          if (!document.getElementById("no-connection-msg")) {
            const noConnectionMsg = document.createElement("div");
            noConnectionMsg.id = "no-connection-msg";
            noConnectionMsg.className = "flex items-center justify-center h-full text-white/50 text-lg";
            noConnectionMsg.textContent = "Waiting for connection...";
            chatContainer.appendChild(noConnectionMsg);
          }
        }
      }

      // Initialize UI state
      updateConnectionUI(false);

      // Handle manual disconnection
      endConnectionBtn.addEventListener("click", () => {
        if (isConnected && room) {
          // Notify server about manual disconnection
          socket.emit("leaveRoom", { room });
          
          // Reset local state
          isConnected = false;
          room = null;
          
          // Update UI
          updateConnectionUI(false);
          
          // If in video call, end it
          if (!videoSection.classList.contains("hidden")) {
            Hangup(true, false); // Don't show notification for manual disconnection
          }
          
          // Rejoin waiting queue
          setTimeout(() => {
            socket.emit("joinroom");
          }, 500);
        }
      });

      // Handle partner disconnection
      socket.on("partnerDisconnected", () => {
        isConnected = false;
        room = null;
        
        // Show disconnection notification
        const notification = document.createElement("div");
        notification.className = "fixed notification-container left-1/2 -translate-x-1/2 glass-morphism-dark rounded-full animate-fade-in z-50 w-[90%]";
        notification.innerHTML = `
          <div class="flex items-center space-x-3">
            <svg class="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span class="text-white">Your partner has disconnected</span>
          </div>
        `;
        document.body.appendChild(notification);
        
        // Remove notification after 3 seconds
        setTimeout(() => {
          notification.remove();
        }, 3000);
        
        // Update UI to disconnected state
        updateConnectionUI(false);
        
        // If in video call, end it
        if (!videoSection.classList.contains("hidden")) {
          Hangup(false, false); // Don't show notification as we already show disconnection message
        }
        
        // Automatically rejoin waiting queue
        setTimeout(() => {
          socket.emit("joinroom");
        }, 1000);
      });

      // Sending chat messages
      typeform.addEventListener("submit", function (event) {
        event.preventDefault();
        if (isConnected && textBox.value.trim()) {
          socket.emit("message", { room: room, message: textBox.value });
          receiveMessage(textBox.value); // Echo message locally
          textBox.value = "";
        }
      });
      socket.on("message", (message) => {
        attachMessage(message);
      });
      // Attach a user message
      function attachMessage(message) {
        const messageContainer = document.createElement("div");
        messageContainer.className = "message-container animate-slide-up";
        
        const userMessage = document.createElement("div");
        userMessage.className = "chat-bubble-received message-text";
        userMessage.textContent = message;
        
        const timeStamp = document.createElement("div");
        timeStamp.className = "text-white/40 text-xs mt-1";
        timeStamp.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        messageContainer.appendChild(userMessage);
        messageContainer.appendChild(timeStamp);
        chatSec.querySelector('.glass-morphism-dark').appendChild(messageContainer);
        chatSec.querySelector('.glass-morphism-dark').scrollTop = chatSec.querySelector('.glass-morphism-dark').scrollHeight;
      }

      // Receive and display a message
      function receiveMessage(message) {
        const messageContainer = document.createElement("div");
        messageContainer.className = "message-container flex flex-col items-end animate-slide-up";
        
        const receivedMessage = document.createElement("div");
        receivedMessage.className = "chat-bubble-sent message-text";
        receivedMessage.textContent = message;
        
        const timeStamp = document.createElement("div");
        timeStamp.className = "text-white/40 text-xs mt-1";
        timeStamp.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        messageContainer.appendChild(receivedMessage);
        messageContainer.appendChild(timeStamp);
        chatSec.querySelector('.glass-morphism-dark').appendChild(messageContainer);
        chatSec.querySelector('.glass-morphism-dark').scrollTop = chatSec.querySelector('.glass-morphism-dark').scrollHeight;
      }

      // WebRTC Variables
      let localStream;
      let remoteStream;
      let peerConnection;
      const servers = {
        iceServers: [
          { urls: "stun:stun.l.google.com:19302" },
          {
            urls: "turn:TURN_SERVER_URL",
            username: "TURN_SERVER_USERNAME",
            credential: "TURN_SERVER_CREDENTIAL",
          },
        ],
      };

      // Start local stream

      async function initialize() {
        // Only proceed if call is active
        if (callState !== 'active') {
          console.log("Cannot initialize - call state is not active");
          return;
        }
        
        socket.on("signalingMessage", HandlingSignalingMessage);
        try {
          localStream = await navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true,
          });
          document.querySelector("#local-Video").srcObject = localStream;
          initiateOffer();
        } catch (error) {
          console.error("Error accessing media devices:", error);
        }
      }

      // Initiate an offer
      const initiateOffer = async function () {
        await createPeerConnection();
        try {
          const offer = await peerConnection.createOffer();
          await peerConnection.setLocalDescription(offer);
          socket.emit("signalingMessage", {
            room: room,
            message: JSON.stringify({
              type: "offer",
              offer,
            }),
          });
        } catch (err) {
          console.error("Failed to create offer: " + err);
        }
      };

      // Create a peer connection
      function createPeerConnection() {
        peerConnection = new RTCPeerConnection(servers);
        remoteStream = new MediaStream();
        document.querySelector("#remote-Video").srcObject = remoteStream;
        localStream.getTracks().forEach((track) => {
          peerConnection.addTrack(track, localStream);
        });

        peerConnection.ontrack = (event) => {
          console.log("Received remote track:", event.track.kind);
          console.log("Adding remote track to remoteStream...");
          event.streams[0].getTracks().forEach((track) => {
            remoteStream.addTrack(track);
          });
        };

        peerConnection.onicecandidate = (event) => {
          console.log("Sending Ice Candidate");

          if (event.candidate) {
            socket.emit("signalingMessage", {
              room,
              message: JSON.stringify({
                type: "candidate",
                candidate: event.candidate,
              }),
            });
          }
        };
        peerConnection.onconnectionstatechange = () => {
          console.log(
            "connection state change",
            peerConnection.connectionState
          );
        };
      }

      const HandlingSignalingMessage = async function (message) {
        const { type, answer, offer, candidate } = JSON.parse(message);
        if (type === "offer") HandleOffer(offer);
        if (type === "answer") HandleAnswer(answer);
        if (type === "candidate" && peerConnection) {
          try {
            await peerConnection.addIceCandidate(candidate);
          } catch (err) {
            console.log(err.message);
          }
        }
        if (type === "hangup") {
          // If we receive hangup, it means partner ended the call
          Hangup(false); // false indicates partner ended the call
        }
      };

      const HandleOffer = async (offer) => {
        await createPeerConnection();
        try {
          await peerConnection.setRemoteDescription(offer);
          const answer = await peerConnection.createAnswer();
          await peerConnection.setLocalDescription(answer);
          socket.emit("signalingMessage", {
            room: room,
            message: JSON.stringify({ type: "answer", answer }),
          });
          inCall = true;
        } catch (err) {
          console.log(err.message);
        }
      };

      const HandleAnswer = async (answer) => {
        try {
          await peerConnection.setRemoteDescription(answer);
        } catch (err) {
          console.log(err.message);
        }
      };

      videoCallBtn.addEventListener("click", () => {
        if (isConnected && callState === null) {
          callState = 'initiating';
          socket.emit("startVideoCall", { room });
          // Show waiting card
          WaitingCall.classList.remove("hidden");
        }
      });
      
      // Cancel call button
      CancelCallBtn.addEventListener("click", () => {
        WaitingCall.classList.add("hidden");
        callState = null; // Reset call state
        socket.emit("cancelCall", { room });
      });

      socket.on("IncomingCall", () => {
        if (callState === null) {
          callState = 'incoming';
          RequestCall.classList.remove("hidden");
        }
      });
      
      // Handle call cancelled by initiator
      socket.on("CallCancelled", () => {
        RequestCall.classList.add("hidden");
        callState = null; // Reset call state
        // Ensure video doesn't start
        if (!videoSection.classList.contains("hidden")) {
          videoSection.classList.add("hidden");
          chatSection.classList.remove("hidden");
          typingSection.classList.remove("hidden");
        }
      });

      socket.on("CallAccepted", () => {
        if (callState === 'initiating') {
          callState = 'active';
          WaitingCall.classList.add("hidden"); // Hide waiting card
          // Only initialize if still in active state
          setTimeout(() => {
            if (callState === 'active') {
              initialize();
              chatSection.classList.add("hidden");
              typingSection.classList.add("hidden");
              videoSection.classList.remove("hidden");
            }
          }, 100);
        }
      });

      AcceptBtn.addEventListener("click", () => {
        if (callState === 'incoming') {
          callState = 'active';
          RequestCall.classList.add("hidden");
          socket.emit("acceptCall", { room });
          // Wait a moment to ensure the other side is ready
          setTimeout(() => {
            if (callState === 'active') {
              chatSection.classList.add("hidden");
              typingSection.classList.add("hidden");
              initialize(); // Start the video stream
              videoSection.classList.remove("hidden");
            }
          }, 100);
        }
      });

      IgnoreBtn.addEventListener("click", () => {
        RequestCall.classList.add("hidden");
        callState = null; // Reset call state
        socket.emit("rejectedCall", { room });
      });

      socket.on("CallRejected", () => {
        callState = null; // Reset call state
        // Update waiting card to show rejection
        document.getElementById("waiting-title").textContent = "Call Rejected";
        document.getElementById("waiting-message").textContent = "Partner declined your video call";
        document.getElementById("waiting-message").classList.add("text-red-400");
        document.getElementById("Cancel-call-btn").textContent = "Close";
        
        // Auto hide after 3 seconds
        setTimeout(() => {
          WaitingCall.classList.add("hidden");
          // Reset the card for next time
          document.getElementById("waiting-title").textContent = "Calling...";
          document.getElementById("waiting-message").textContent = "Waiting for partner to accept...";
          document.getElementById("waiting-message").classList.remove("text-red-400");
          document.getElementById("Cancel-call-btn").textContent = "Cancel Call";
        }, 3000);
      });

      document.querySelector("#endCallBtn").addEventListener("click", () => {
        Hangup(true); // true indicates user initiated the hangup
      });

      function Hangup(initiatedByUser = false, showNotification = true) {
        if (peerConnection) {
          peerConnection.close();
          peerConnection = null;
          localStream.getTracks().forEach((track) => track.stop());

          videoSection.classList.add("hidden");
          chatSection.classList.remove("hidden");
          typingSection.classList.remove("hidden");
          
          // Send hangup message with initiator info
          socket.emit("signalingMessage", {
            room,
            message: JSON.stringify({ type: "hangup", initiatedByUser }),
          });
          
          // Show notification if requested
          if (showNotification) {
            showVideoCallEndNotification(initiatedByUser);
          }
          
          inCall = false;
          callState = null; // Reset call state when hanging up
        }
      }
      
      // Function to show video call end notification
      function showVideoCallEndNotification(endedByYou) {
        const notification = document.createElement("div");
        notification.className = "fixed notification-container left-1/2 -translate-x-1/2 glass-morphism-dark rounded-full animate-fade-in z-50 w-[90%]";
        
        const message = endedByYou ? "Video call ended by you" : "Video call ended by partner";
        const iconColor = endedByYou ? "text-blue-400" : "text-orange-400";
        
        notification.innerHTML = `
          <div class="flex items-center space-x-3">
            <svg class="w-5 h-5 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M5 3a2 2 0 00-2 2v1c0 8.284 6.716 15 15 15h1a2 2 0 002-2v-3.28a1 1 0 00-.684-.948l-4.493-1.498a1 1 0 00-1.21.502l-1.13 2.257a11.042 11.042 0 01-5.516-5.517l2.257-1.128a1 1 0 00.502-1.21L9.228 3.683A1 1 0 008.279 3H5z"></path>
            </svg>
            <span class="text-white">${message}</span>
          </div>
        `;
        
        document.body.appendChild(notification);
        
        // Remove notification after 3 seconds
        setTimeout(() => {
          notification.remove();
        }, 3000);
      }
      
      // Call timer
      let callStartTime = null;
      let timerInterval = null;
      
      function startCallTimer() {
        callStartTime = Date.now();
        timerInterval = setInterval(updateCallTimer, 1000);
      }
      
      function updateCallTimer() {
        if (!callStartTime) return;
        const elapsed = Math.floor((Date.now() - callStartTime) / 1000);
        const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
        const seconds = (elapsed % 60).toString().padStart(2, '0');
        document.getElementById('call-timer').textContent = `${minutes}:${seconds}`;
      }
      
      function stopCallTimer() {
        if (timerInterval) {
          clearInterval(timerInterval);
          timerInterval = null;
        }
        callStartTime = null;
        document.getElementById('call-timer').textContent = '00:00';
      }
      
      // Update video call start to include timer
      const originalInitialize = initialize;
      initialize = async function() {
        await originalInitialize();
        startCallTimer();
      };
      
      // Update hangup to stop timer
      const originalHangup = Hangup;
      Hangup = function(initiatedByUser = false, showNotification = true) {
        originalHangup(initiatedByUser, showNotification);
        stopCallTimer();
      }
      
      // Video toggle functionality
      let videoEnabled = true;
      document.getElementById('videoToggleBtn').addEventListener('click', () => {
        if (localStream) {
          const videoTrack = localStream.getVideoTracks()[0];
          if (videoTrack) {
            videoEnabled = !videoEnabled;
            videoTrack.enabled = videoEnabled;
            document.getElementById('videoToggleBtn').classList.toggle('bg-red-600/80');
            document.getElementById('videoToggleBtn').classList.toggle('bg-gray-800/80');
          }
        }
      });
      
      // Update mute button visual feedback
      document.getElementById('muteBtn').addEventListener('click', () => {
        if (localStream) {
          const audioTrack = localStream.getAudioTracks()[0];
          if (audioTrack) {
            // Toggle the audio track
            audioTrack.enabled = !audioTrack.enabled;
            const isMuted = !audioTrack.enabled;
            
            // Update button appearance
            if (isMuted) {
              document.getElementById('muteBtn').classList.remove('bg-gray-800/80');
              document.getElementById('muteBtn').classList.add('bg-red-600/80');
            } else {
              document.getElementById('muteBtn').classList.remove('bg-red-600/80');
              document.getElementById('muteBtn').classList.add('bg-gray-800/80');
            }
          }
        }
      });
    </script>
  </body>
</html>
