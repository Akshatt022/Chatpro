<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Professional Chat UI</title>
    <link rel="stylesheet" href="css/style.css" />
    <!-- Import Google Fonts -->
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Playfair+Display:wght@700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body id="main" class="bg-black bg-gray-100">
    <!-- Navigation Bar -->
    <nav
      class="w-full bg-gray-800 text-white flex justify-between items-center px-8 py-4 fixed top-0 left-0 z-50"
    >
      <h1 class="text-[32px] font-playfair font-bold text-gray-100">ChatPro</h1>
      <button
        id="videoCallBtn"
        class="bg-cyan-600 text-white px-6 py-2 rounded-lg text-[18px] font-inter font-semibold hover:bg-cyan-700 transition-all"
      >
        Video Call
      </button>
    </nav>

    <!-- Chat Section (Hidden during video call) -->
    <div
      id="chat-sec"
      class="w-full h-[80%] flex flex-col bg-[#dfeece] shadow-inner overflow-y-auto p-4 absolute top-[10%] left-0 z-40"
    >
      <!-- Reguesting the call  -->
      <div
        id="Request-call"
        class="absolute w-80 bg-white shadow-lg rounded-lg p-6 left-[40%] top-[40%] hidden"
      >
        <h1 class="text-lg font-semibold text-gray-800 text-center">
          Incoming Call
        </h1>
        <div class="mt-4 flex flex-col items-center">
          <div
            class="w-16 h-16 bg-gray-300 rounded-full flex items-center justify-center"
          >
            <!-- Placeholder for profile image -->
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-8 w-8 text-gray-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M10 4a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z"
                clip-rule="evenodd"
              />
            </svg>
          </div>
        </div>
        <div class="mt-6 flex justify-between">
          <button
            id="Ignore-btn"
            class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400"
          >
            Ignore
          </button>
          <button
            id="Accept-btn"
            class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
          >
            Accept
          </button>
        </div>
      </div>
    </div>

    <!-- Video Section -->
    <div
      id="video-sec"
      class="relative w-full h-screen bg-gray-500 overflow-hidden hidden"
    >
      <video id="remote-Video" autoplay class="object-cover w-full h-full"></video>
      <!-- Local Video (Movable) -->
      <div
        id="localVideo"
        class="absolute bottom-4 right-4 bg-gray-800 w-[25%] h-30 rounded-md shadow-md cursor-move"
      >
        <video
          id="local-Video"
          autoplay
          muted
          class="w-[100%] h-[100%] rounded-md"
        ></video>
      </div>
      <div
        class="absolute bottom-8 left-[45%] flex items-center justify-center gap-8"
      >
        <button
          id="muteBtn"
          class="bg-blue-600 text-white p-3 rounded-full hover:bg-red-700 flex items-center justify-center"
        >
        <svg fill="#000000" width="40px" height="40px" viewBox="0 -2.35 26.581 26.581" id="_06_-_Mute" data-name="06 - Mute" xmlns="http://www.w3.org/2000/svg">
          <path id="Path_163" data-name="Path 163" d="M21.29,8.375A3,3,0,0,0,16.5,5.969L8.743,11.74H5.709a3,3,0,0,0-3,3v3.154a3,3,0,0,0,3,3H8.743L16.5,26.666a3,3,0,0,0,4.791-2.407V8.375Zm-2,0V24.259a1,1,0,0,1-1.6.8l-8.022-5.97a1,1,0,0,0-.6-.2H5.709a1,1,0,0,1-1-1V14.74a1,1,0,0,1,1-1H9.074a1,1,0,0,0,.6-.2l8.022-5.97a1,1,0,0,1,1.6.8Z" transform="translate(-2.709 -5.376)" fill-rule="evenodd"></path>
          <path id="Path_164" data-name="Path 164" d="M23.256,13.885l4.234,5.646a1,1,0,0,0,1.6-1.2l-4.234-5.646a1,1,0,0,0-1.6,1.2Z" transform="translate(-2.709 -5.376)" fill-rule="evenodd"></path>
          <path id="Path_165" data-name="Path 165" d="M27.49,12.685l-4.234,5.646a1,1,0,0,0,1.6,1.2l4.234-5.646a1,1,0,0,0-1.6-1.2Z" transform="translate(-2.709 -5.376)" fill-rule="evenodd"></path>
        </svg>
        </button>
        <button
          id="endCallBtn"
          class="bg-red-600 text-white p-3 rounded-full hover:bg-blue-700 flex items-center justify-center"
        >
        <svg width="40px" height="40px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M20 4L15 8.99998M20 9L15 4.00002" stroke="#363853" stroke-width="1.5" stroke-linecap="round"></path>
          <path d="M15.1653 20.8835C16.0469 21.0388 16.9531 21.0388 17.8347 20.8835C19.2516 20.6338 20.3929 19.6826 20.786 18.4236L20.8694 18.1565C20.956 17.879 21 17.5919 21 17.3034C21 16.0313 19.8623 15 18.4589 15H14.5411C13.1377 15 12 16.0313 12 17.3034C12 17.5919 12.044 17.879 12.1306 18.1565L12.214 18.4236C12.6071 19.6826 13.7484 20.6338 15.1653 20.8835ZM15.1653 20.8835C9.04195 19.7489 4.25108 14.958 3.1165 8.83468M3.1165 8.83468C2.96117 7.95315 2.96117 7.04686 3.1165 6.16532C3.36618 4.74842 4.31744 3.60713 5.57641 3.21402L5.84345 3.13063C6.12103 3.04396 6.40813 3 6.69661 3C7.96874 3 9.00001 4.13768 9 5.54106L9 9.45894C9.00001 10.8623 7.96874 12 6.69661 12C6.40813 12 6.12103 11.956 5.84345 11.8694L5.57641 11.786C4.31744 11.3929 3.36618 10.2516 3.1165 8.83468Z" stroke="#363853" stroke-width="1.5"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Typing Section -->
    <div
      id="Type-sec"
      class="w-full h-[10%] bg-gray-100 shadow-t p-4 absolute bottom-0 left-0 z-50"
    >
      <form
        id="Type-form"
        class="w-full h-full flex items-center justify-between"
      >
        <input
          id="text-input"
          type="text"
          placeholder="Type a message..."
          class="outline-none bg-gray-200 w-[90%] h-[100%] rounded-full px-4 text-gray-800 font-inter focus:ring-2 focus:ring-blue-500 transition-all"
        />
        <button
          id="sendbtn"
          type="submit"
          class="bg-blue-600 text-white px-8 py-3 rounded-full text-[18px] font-semibold font-inter cursor-pointer hover:bg-blue-700 transition-all"
        >
          Send
        </button>
      </form>
    </div>

    <!-- JAVASCRIPT -->
    <script
      src="https://cdn.socket.io/4.8.1/socket.io.min.js"
      integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+"
      crossorigin="anonymous"
    ></script>
    <script>
      const socket = io();
      let room;
      const main = document.querySelector("#main");
      const chatbox = document.querySelector("#Type-sec");
      const textBox = document.querySelector("#text-input");
      const typeform = document.querySelector("#Type-form");
      const chatSec = document.querySelector("#chat-sec");
      const videoCallBtn = document.getElementById("videoCallBtn");
      const videoSection = document.getElementById("video-sec");
      const chatSection = document.getElementById("chat-sec");
      const typingSection = document.getElementById("Type-sec");
      const endCallBtn = document.getElementById("endCallBtn");
      const RequestCall = document.getElementById("Request-call");
      const IgnoreBtn = document.getElementById("Ignore-btn");
      const AcceptBtn = document.getElementById("Accept-btn");

      // Join the room
      socket.emit("joinroom");
      socket.on("joined", function (roomname) {
        room = roomname;
      });

      // Sending chat messages
      typeform.addEventListener("submit", function (event) {
        event.preventDefault();
        socket.emit("message", { room: room, message: textBox.value });
        receiveMessage(textBox.value); // Echo message locally
        textBox.value = "";
      });
      socket.on("message", (message) => {
        attachMessage(message);
      });
      // Attach a user message
      function attachMessage(message) {
        const userMessage = document.createElement("div");
        userMessage.className =
          "user-message text-left text-black rounded-lg p-3 mb-2 max-w-[70%] mr-auto";
        userMessage.textContent = message;
        userMessage.style.backgroundColor = "#cccccc";
        userMessage.style.fontWeight = "bold";
        userMessage.style.fontSize = "18px";
        chatSec.appendChild(userMessage);
        chatSec.scrollTop = chatSec.scrollHeight; // Scroll to bottom
      }

      // Receive and display a message
      function receiveMessage(message) {
        const receivedMessage = document.createElement("div");
        receivedMessage.className =
          "received-message text-right text-white rounded-lg p-3 mb-2 max-w-[70%] ml-auto";
        receivedMessage.textContent = message;
        receivedMessage.style.backgroundColor = "#2196f3";
        receivedMessage.style.fontWeight = "bold";
        receivedMessage.style.fontSize = "18px";
        chatSec.appendChild(receivedMessage);
        chatSec.scrollTop = chatSec.scrollHeight; // Scroll to bottom
      }

      // WebRTC Variables
      let localStream;
      let remoteStream;
      let peerConnection;
      const servers = {
        iceServers: [
          { urls: "stun:stun.l.google.com:19302" },
          {
            urls: "turn:TURN_SERVER_URL",
            username: "TURN_SERVER_USERNAME",
            credential: "TURN_SERVER_CREDENTIAL",
          },
        ],
      };

      // Start local stream

      async function initialize() {
        socket.on("signalingMessage", HandlingSignalingMessage);
        try {
          localStream = await navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true,
          });
          document.querySelector("#local-Video").srcObject = localStream;
          initiateOffer();
        } catch (error) {
          console.error("Error accessing media devices:", error);
        }
      }

      // Initiate an offer
      const initiateOffer = async function () {
        await createPeerConnection();
        try {
          const offer = await peerConnection.createOffer();
          await peerConnection.setLocalDescription(offer);
          socket.emit("signalingMessage", {
            room: room,
            message: JSON.stringify({
              type: "offer",
              offer,
            }),
          });
        } catch (err) {
          console.error("Failed to create offer: " + err);
        }
      };

      // Create a peer connection
      function createPeerConnection() {
        peerConnection = new RTCPeerConnection(servers);
        remoteStream = new MediaStream();
        document.querySelector("#remote-Video").srcObject = remoteStream;
        localStream.getTracks().forEach((track) => {
          peerConnection.addTrack(track, localStream);
        });

        peerConnection.ontrack = (event) => {
          console.log("Received remote track:", event.track.kind);
          console.log("Adding remote track to remoteStream...");
          event.streams[0].getTracks().forEach((track) => {
            remoteStream.addTrack(track);
          });
        };

        peerConnection.onicecandidate = (event) => {
          console.log("Sending Ice Candidate");

          if (event.candidate) {
            socket.emit("signalingMessage", {
              room,
              message: JSON.stringify({
                type: "candidate",
                candidate: event.candidate,
              }),
            });
          }
        };
        peerConnection.onconnectionstatechange = () => {
          console.log(
            "connection state change",
            peerConnection.connectionState
          );
        };
      }

      const HandlingSignalingMessage = async function (message) {
        const { type, answer, offer, candidate } = JSON.parse(message);
        if (type === "offer") HandleOffer(offer);
        if (type === "answer") HandleAnswer(answer);
        if (type === "candidate" && peerConnection) {
          try {
            await peerConnection.addIceCandidate(candidate);
          } catch (err) {
            console.log(err.message);
          }
        }
        if(type === "hangup") Hangup();
      };

      const HandleOffer = async (offer) => {
        await createPeerConnection();
        try {
          await peerConnection.setRemoteDescription(offer);
          const answer = await peerConnection.createAnswer();
          await peerConnection.setLocalDescription(answer);
          socket.emit("signalingMessage", {
            room: room,
            message: JSON.stringify({ type: "answer", answer }),
          });
          inCall = true;
        } catch (err) {
          console.log(err.message);
        }
      };

      const HandleAnswer = async (answer) => {
        try {
          await peerConnection.setRemoteDescription(answer);
        } catch (err) {
          console.log(err.message);
        }
      };

      videoCallBtn.addEventListener("click", () => {
        socket.emit("startVideoCall", { room });
      });

      socket.on("IncomingCall", () => {
        RequestCall.classList.remove("hidden");
      });

      socket.on("CallAccepted",()=>{
        initialize();
        chatSection.classList.add("hidden");
        typingSection.classList.add("hidden");
        videoSection.classList.remove("hidden");
      })

      AcceptBtn.addEventListener("click", () => {
        RequestCall.classList.add("hidden");
        chatSection.classList.add("hidden");
        typingSection.classList.add("hidden");
        initialize(); // Start the video stream
        videoSection.classList.remove("hidden");
        socket.emit("acceptCall", { room });
      });

      IgnoreBtn.addEventListener("click",()=>{
        RequestCall.classList.add("hidden");
        socket.on("rejectedCall",{ room });
      })

      socket.on("CallRejected",()=>{
        alert("Call rejected by the other user");
      })

      document.querySelector("#endCallBtn").addEventListener("click",()=>{
       Hangup();
      })

      function Hangup(){
        if(peerConnection){
          peerConnection.close();
          peerConnection = null;
          localStream.getTracks().forEach(track => track.stop());

          videoSection.classList.add("hidden");
          chatSection.classList.remove("hidden");
          typingSection.classList.remove("hidden");
          socket.emit("signalingMessage",{room,message: JSON.stringify({type:"hangup"})});
          inCall = false;
        }
      }
      
    </script>
  </body>
</html>
